from yandex_music import Client, Track
from yandex_music.exceptions import NotFoundError

import discord
from discord import Embed, SelectOption, ButtonStyle, app_commands
from discord.ext import commands
from discord.ui import Button, View, Select

import asyncio
import os
import datetime
import requests
import textwrap
import re
from pytube import YouTube
# from pydub import AudioSegment
from googleapiclient.discovery import build
from random import random


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Discord –∫–ª–∏–µ–Ω—Ç
intents = discord.Intents.all()
intents.members = True
intents.messages = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)
bot = commands.Bot(command_prefix='!', intents=intents)


'''
–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
'''
tokens = {}
settings_onyourwave = {}
user = os.environ.get('USERNAME')
output_path = f'C:\\Users\\{user}\\Music'  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª
data_server = {'playlist': [],
               'repeat_flag': False,
               'queue_repeat': '',
               'index_play_now': 0,
               'task': None,
               'task_reserv': None,
               'task_check_voice_clients': None,
               'task_check_inactivity': None,
               'lyrics': None,
               'track_url': None,
               'cover_url': None,
               'track_id_play_now': None,
               'index_play_now': 0,
               'radio': None,
               'user_discord_radio': None,
               'radio_check': False,
               'stream_by_track_check': False,
               'last_activity_time': datetime.datetime.now(),
               'message_check': '',
               'command_now': 0
               }
data_servers = {}


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists("tokens.txt") and os.path.getsize("tokens.txt") > 0:
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    with open("tokens.txt", "r") as f:
        # —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        lines = f.readlines()
        # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        for line in lines:
            # —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–±–µ–ª—É
            user_discord, token = line.strip().rsplit(maxsplit=1)
            # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            tokens[user_discord] = token


'''
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
'''
async def remove_last_playing_message(interaction: discord.Interaction):
    async for message in interaction.channel.history():
        if message.author == client.user and \
                (message.content.startswith('–¢–µ–∫—Å—Ç') or
                 message.content.startswith('–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã') or
                 message.content.startswith('–ï—â—ë —É–≤–∏–¥–µ–º—Å—è') or
                 message.content.startswith('–¢—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏') or
                 message.content.startswith('–í—Å–µ –ø–æ–∫–∏–Ω—É–ª–∏') or
                 message.content.startswith('–ù–µ —É–¥–∞–ª–æ—Å—å') or
                 (isinstance(message.embeds, list) and len(message.embeds) > 0)):
            try:
                await message.delete()
            except Exception:
                pass
        elif message.content.startswith('!play'):
            try:
                await message.delete()
            except Exception:
                pass
async def check_voice_clients(interaction: discord.Interaction):
    global data_servers, data_servers_log

    voice_client = interaction.guild.voice_client
    while True:
        # now = datetime.datetime.now()
        # for name_server in data_servers:
        #     data_servers_log[name_server][str(now).split('.')[0]] = data_servers[name_server]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if voice_client and not any(member != client.user for member in voice_client.channel.members):
            if voice_client.is_playing():
                voice_client.stop()
            await voice_client.disconnect()
            data_servers[interaction.guild.name]['task'].cancel()
            await remove_last_playing_message(interaction)

            now = datetime.datetime.now()
            current_time = now.time()
            filename = "C:\\Users\\tima\\Documents\\Log YM\\" + f"log-{now:%Y-%m-%d}.txt"
            # with open(filename, "a") as f:
            #     f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            #     f.write(f"–í—Ä–µ–º—è: {current_time}\n"
            #             f"–°–µ—Ä–≤–µ—Ä: {interaction.guild.name}\n"
            #             f"–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞: {voice_client.channel}\n"
            #             "–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
            return
        await asyncio.sleep(1)
async def check_inactivity(interaction: discord.Interaction):
    global data_servers

    voice_client = interaction.guild.voice_client
    while True:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ 20 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        if datetime.datetime.now() - data_servers[interaction.guild.name]['last_activity_time'] > datetime.timedelta(
                minutes=5) and not voice_client.is_playing() and voice_client:
            await voice_client.disconnect()
            await remove_last_playing_message(interaction)
            data_servers[interaction.guild.name]['task'].cancel()
            data_servers[interaction.guild.name]['task_check_voice_clients'].cancel()
            now = datetime.datetime.now()
            current_time = now.time()
            filename = "C:\\Users\\tima\\Documents\\Log YM\\" + f"log-{now:%Y-%m-%d}.txt"
            # with open(filename, "a") as f:
            #     f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            #     f.write(f"–í—Ä–µ–º—è: {current_time}\n"
            #             f"–°–µ—Ä–≤–µ—Ä: {ctx.guild.name}\n"
            #             f"–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞: {voice_client.channel}\n"
            #             "–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è\n")
            return
        # –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await asyncio.sleep(1)
async def disconnect(interaction: discord.Interaction):
    global data_servers
    voice_client = interaction.guild.voice_client
    try:
        if voice_client.is_connected():
            if voice_client.is_playing():
                voice_client.stop()
            await voice_client.disconnect()

            data_servers[interaction.guild.name]['playlist'] = []
            data_servers[interaction.guild.name]['index_play_now'] = 0

            data_servers[interaction.guild.name]['task'].cancel()
            data_servers[interaction.guild.name]['task_check_inactivity'].cancel()
            data_servers[interaction.guild.name]['task_check_voice_clients'].cancel()

            await remove_last_playing_message(interaction)

            now = datetime.datetime.now()
            current_time = now.time()
            filename = "C:\\Users\\tima\\Documents\\Log YM\\" + f"log-{now:%Y-%m-%d}.txt"
            # with open(filename, "a") as f:
            #     f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            #     f.write(f"–í—Ä–µ–º—è: {current_time}\n"
            #             f"–°–µ—Ä–≤–µ—Ä: {interaction.guild.name}\n"
            #             f"–ë–æ—Ç–∞ –æ—Ç–∫–ª—é—á–∏–ª: {str(interaction.user)}\n"
            #             f"–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞: {voice_client.channel}\n\n")
    except Exception:
        pass
async def check_audio_file(path):
    audio = AudioSegment.from_file(path)
    bitrate = audio.frame_rate * audio.channels * audio.sample_width * 8
    # print("bitrate = ", bitrate, "\nframe_rate = ", audio.frame_rate, "\nChannels = ", audio.channels, "\nsample_width = ", audio.sample_width)
    if (500 < bitrate < 512000):
        return True
    return False
async def add_queue(ctx, url_or_trackname_or_filepath):
    global index_queue

    playlist_ym = url_or_trackname_or_filepath.split(',')
    playlist_id = playlist_ym[0]

    client_ym = Client(tokens[user_discord]).init()

    if playlist_id.isdigit():
        try:
            playlist_new = client_ym.users_playlists(playlist_id)
        except Exception:
            await ctx.send(content=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å ID {playlist_id}")
            return

        if len(playlist_ym) == 1:
            for i in range(len(playlist_new.tracks)):
                playlists[ctx.guild.name].append(f"{user_discord}|{playlist_id},{i + 1}")
        else:
            if "-" in playlist_ym[1]:
                playlist_b_e = playlist_ym[1].split('-')

                if playlist_b_e[1] == '':
                    index_begin = int(playlist_b_e[0])
                    index_track = index_begin

                    if index_track > len(playlist_new.tracks):
                        await ctx.send(
                            f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                        return
                    elif index_track <= 0:
                        await ctx.send(f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                        return

                    for i in range(index_begin - 1, len(playlist_new.tracks)):
                        playlists[ctx.guild.name].append(f"{user_discord}|{playlist_id},{i + 1}")
                    # check_next_index = index_queue + len(playlist_new.tracks) - index_begin
                elif playlist_b_e[0] == '':
                    index_end = int(playlist_b_e[1])

                    if index_end > len(playlist_new.tracks):
                        await ctx.send(
                            f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                        return
                    elif index_end <= 0:
                        await ctx.send(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                        return

                    for i in range(index_end):
                        playlists[ctx.guild.name].append(f"{user_discord}|{playlist_id},{i + 1}")
                    # check_next_index = index_queue + index_end
                else:
                    index_begin = int(playlist_b_e[0])
                    index_end = int(playlist_b_e[1])

                    if index_end > len(playlist_new.tracks):
                        await ctx.send(
                            f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                        return
                    elif index_end <= 0:
                        await ctx.send(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                        return
                    elif index_begin > index_end:
                        await ctx.send(
                            f"\"{index_end}\" - –Ω–æ–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞–ª–∞ üôÉ")
                        return

                    for i in range(index_begin - 1, index_end):
                        playlists[ctx.guild.name].append(f"{user_discord}|{playlist_id},{i + 1}")
                    # check_next_index = index_queue + index_end - index_begin
            else:
                index_track = int(playlist_ym[1])
                playlists[ctx.guild.name].append(f"{user_discord}|{playlist_id},{index_track}")
                # check_next_index = index_queue + 1
    else:  # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        if "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è" in playlist_id:
            playlist_new = client_ym.users_likes_tracks()
            if len(playlist_ym) == 1:
                for i in range(len(playlist_new.tracks)):
                    playlists[ctx.guild.name].append(f"{user_discord}|–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è,{i + 1}")

            else:
                if "-" in playlist_ym[1]:
                    playlist_b_e = playlist_ym[1].split('-')

                    if playlist_b_e[1] == '':
                        index_begin = int(playlist_b_e[0])
                        index_track = index_begin

                        if index_track > len(playlist_new.tracks):
                            await ctx.send(
                                f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                            return
                        elif index_track <= 0:
                            await ctx.send(f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                            return

                        for i in range(index_begin - 1, len(playlist_new.tracks)):
                            playlists[ctx.guild.name].append(f"{user_discord}|–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è,{i + 1}")

                    elif playlist_b_e[0] == '':
                        index_end = int(playlist_b_e[1])

                        if index_end > len(playlist_new.tracks):
                            await ctx.send(
                                f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                            return
                        elif index_end <= 0:
                            await ctx.send(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                            return

                        for i in range(index_end):
                            playlists[ctx.guild.name].append(f"{user_discord}|–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è,{i + 1}")

                    else:
                        index_begin = int(playlist_b_e[0])
                        index_end = int(playlist_b_e[1])

                        if index_end > len(playlist_new.tracks):
                            await ctx.send(
                                f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                            return
                        elif index_end <= 0:
                            await ctx.send(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                            return
                        elif index_begin > index_end:
                            await ctx.send(
                                f"\"{index_end}\" - –Ω–æ–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞–ª–∞ üôÉ")
                            return

                        for i in range(index_begin - 1, index_end):
                            playlists[ctx.guild.name].append(f"{user_discord}|–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è,{i + 1}")

                else:
                    index_track = int(playlist_ym[1])
                    playlists[ctx.guild.name].append(f"{user_discord}|–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è,{index_track}")
        else:
            playlists_name = client_ym.users_playlists_list()

            for name in playlists_name:
                if url_or_trackname_or_filepath in name.title:
                    playlist_id = name.playlist_id.split(':')[1]
            if not playlist_id.isdigit():
                with open("C:\\Users\\tima\\Pictures\\Gif\\spin-1.gif", 'rb') as f:
                    file = discord.File(f)
                await ctx.send(content=f"\"{playlist_id}\" - –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º", file=file)
                return
            playlist_new = client_ym.users_playlists(int(playlist_id))
            if len(playlist_ym) == 1:
                for i in range(len(playlist_new.tracks)):
                    playlists[ctx.guild.name].append(f"{user_discord}|{playlist_new.title},{i + 1}")
            else:
                if "-" in playlist_ym[1]:
                    playlist_b_e = playlist_ym[1].split('-')

                    if playlist_b_e[1] == '':
                        index_begin = int(playlist_b_e[0])
                        index_track = index_begin

                        if index_track > len(playlist_new.tracks):
                            await ctx.send(
                                f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                            return
                        elif index_track <= 0:
                            await ctx.send(f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                            return

                        for i in range(index_begin - 1, len(playlist_new.tracks)):
                            playlists[ctx.guild.name].append(f"{user_discord}|{playlist_new.title},{i + 1}")

                    elif playlist_b_e[0] == '':
                        index_end = int(playlist_b_e[1])

                        if index_end > len(playlist_new.tracks):
                            await ctx.send(
                                f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                            return
                        elif index_end <= 0:
                            await ctx.send(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                            return

                        for i in range(index_end):
                            playlists[ctx.guild.name].append(f"{user_discord}|{playlist_new.title},{i + 1}")
                    else:
                        index_begin = int(playlist_b_e[0])
                        index_end = int(playlist_b_e[1])

                        if index_end > len(playlist_new.tracks):
                            await ctx.send(
                                f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"")
                            return
                        elif index_end <= 0:
                            await ctx.send(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ")
                            return
                        elif index_begin > index_end:
                            await ctx.send(
                                f"\"{index_end}\" - –Ω–æ–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞–ª–∞ üôÉ")
                            return

                        for i in range(index_begin - 1, index_end):
                            playlists[ctx.guild.name].append(f"{user_discord}|{playlist_new.title},{i + 1}")

                else:
                    index_track = int(playlist_ym[1])
                    playlists[ctx.guild.name].append(f"{user_discord}|{playlist_new.title},{i + 1}")
async def play_YouTube(url_or_trackname_or_filepath, user_discord, interaction: discord.Interaction):
    global data_servers

    api_key = "AIzaSyB_OXBg1a2u4bnMVhh6hPZ1nxA398AfhdU"

    data_servers[interaction.guild.name]['track_url'] = url_or_trackname_or_filepath
    data_servers[interaction.guild.name]['track_id_play_now'] = None
    data_servers[interaction.guild.name]['radio_check'] = False
    data_servers[interaction.guild.name]['stream_by_track_check'] = False

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏
    video_id = re.findall(r'v=(\w+)', url_or_trackname_or_filepath)[0]

    # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç YouTube API
    youtube = build('youtube', 'v3', developerKey=api_key)

    # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video_info = youtube.videos().list(part='snippet', id=video_id).execute()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    play_now = f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_info['items'][0]['snippet']['title']}\n–ê–≤—Ç–æ—Ä: {video_info['items'][0]['snippet']['channelTitle']}"

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ URL –ø—Ä–µ–≤—å—é –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data_servers[interaction.guild.name]['cover_url'] = video_info['items'][0]['snippet']['thumbnails']['high']['url']

    audio_file_path = f'{output_path}\\YT_{str(user_discord)}.mp3'

    yt = YouTube(url_or_trackname_or_filepath)

    # –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∏—Ç—Ä–µ–π—Ç–æ–º
    audio_stream = yt.streams.filter(only_audio=True).order_by('abr').desc().first()

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
    audio_stream.download(output_path=output_path, filename=f'YT_{str(user_discord)}.mp3')

    return [play_now, audio_file_path]
async def play_Yandex_Music_url(interaction: discord.Interaction, url_or_trackname_or_filepath, user_discord):
    global data_servers

    client_ym = Client(tokens[user_discord]).init()

    numbers = [int(s) for s in url_or_trackname_or_filepath.split('/') if s.isdigit()]
    if len(numbers) == 1:
        track_id = numbers[0]
        track = client_ym.tracks(track_id)[0]
    else:
        album_id = numbers[0]
        track_id = numbers[1]
        track = client_ym.tracks(f'{track_id}:{album_id}')[0]

    track.download(f'C:\\Users\\{user}\\Music\\YM_{user_discord}.mp3')
    data_servers[interaction.guild.name]['track_id_play_now'] = track.id

    try:
        data_servers[interaction.guild.name]['lyrics'] = track.get_lyrics().fetch_lyrics()
    except Exception:
        data_servers[interaction.guild.name]['lyrics'] = None

    base_url = 'https://music.yandex.ru/track/'
    data_servers[interaction.guild.name]['track_url'] = base_url + str(track_id)

    if track.cover_uri:
        data_servers[interaction.guild.name]['cover_url'] = f"https://{track.cover_uri.replace('%%', '200x200')}"
    else:
        data_servers[interaction.guild.name]['cover_url'] = None

    artists = track.artists
    if not artists:
        artist_all = ""
    else:
        artist_names = [artist.name for artist in artists]  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞—Ä—Ç–∏—Å—Ç–æ–≤
        artist_all = ", ".join(artist_names)  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

    if data_servers[interaction.guild.name]['radio_check']:
        play_now = f"\n–†–∞–¥–∏–æ: –ú–æ—è –≤–æ–ª–Ω–∞\n–¢—Ä–µ–∫: {track.title}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {artist_all}\n"
    elif data_servers[interaction.guild.name]['stream_by_track_check']:
        play_now = f"\n–†–∞–¥–∏–æ: –ú–æ—è –≤–æ–ª–Ω–∞ –ø–æ —Ç—Ä–µ–∫—É\n–¢—Ä–µ–∫: {track.title}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {artist_all}\n"
    else:
        play_now = f"\n–¢—Ä–µ–∫: {track.title}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {artist_all}\n"
    audio_file_path = f'{output_path}\\YM_{user_discord}.mp3'

    # if not await check_audio_file(audio_file_path):
    #     # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
    #     audio = AudioSegment.from_file(audio_file_path)
    #     audio = audio.set_frame_rate(96000).set_channels(2)
    #     audio.export(audio_file_path, format="mp3")

    return [play_now, audio_file_path]
async def play_Yandex_Music_playlist(interaction: discord.Interaction, url_or_trackname_or_filepath, user_discord):
    global data_servers
    voice_client = interaction.guild.voice_client

    playlist_ym = url_or_trackname_or_filepath.split(',')
    playlist_id = playlist_ym[0]

    client_ym = Client(tokens[user_discord]).init()

    if playlist_id == "3":
        playlist_new = client_ym.users_likes_tracks()
    else:
        try:
            playlist_new = client_ym.users_playlists(playlist_id)
        except Exception:
            p = await send_search_request(interaction, url_or_trackname_or_filepath, user_discord)
            if not p:
                return False

            play_now = p[0]
            audio_file_path = p[1]
            return [play_now, audio_file_path]

    if len(playlist_ym) == 1:
        for i in range(len(playlist_new.tracks)):
            data_servers[interaction.guild.name]['playlist'].append(f"{user_discord}|{playlist_id},{i + 1}")

        index_track = 1
        track_short = playlist_new.tracks[index_track - 1]
    else:
        if "-" in playlist_ym[1]:
            playlist_b_e = playlist_ym[1].split('-')

            if playlist_b_e[1] == '':
                index_begin = int(playlist_b_e[0])
                index_track = index_begin

                if index_track > len(playlist_new.tracks):
                    await interaction.response.send_message(
                        f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"",
                        ephemeral=True)
                    return False
                elif index_track <= 0:
                    await interaction.response.send_message(f"\"{index_track}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ",
                                                            ephemeral=True)
                    return False

                for i in range(index_begin - 1, len(playlist_new.tracks)):
                    data_servers[interaction.guild.name]['playlist'].append(f"{user_discord}|{playlist_id},{i + 1}")

                track_short = playlist_new.tracks[index_track - 1]
            elif playlist_b_e[0] == '':
                index_end = int(playlist_b_e[1])

                if index_end > len(playlist_new.tracks):
                    await interaction.response.send_message(
                        f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"",
                        ephemeral=True)
                    return False
                elif index_end <= 0:
                    await interaction.response.send_message(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ",
                                                            ephemeral=True)
                    return False

                for i in range(index_end):
                    data_servers[interaction.guild.name]['playlist'].append(f"{user_discord}|{playlist_id},{i + 1}")

                index_track = 1
                track_short = playlist_new.tracks[index_track - 1]
            else:
                index_begin = int(playlist_b_e[0])
                index_end = int(playlist_b_e[1])

                if index_end > len(playlist_new.tracks):
                    await interaction.response.send_message(
                        f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ \"{len(playlist_new.tracks)}\"",
                        ephemeral=True)
                    return False
                elif index_end <= 0:
                    await interaction.response.send_message(f"\"{index_end}\" - –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 üôÉ",
                                                            ephemeral=True)
                    return False
                elif index_begin > index_end:
                    await interaction.response.send_message(
                        f"\"{index_end}\" - –Ω–æ–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞–ª–∞ üôÉ",
                        ephemeral=True)
                    return False

                for i in range(index_begin - 1, index_end):
                    data_servers[interaction.guild.name]['playlist'].append(f"{user_discord}|{playlist_id},{i + 1}")

                index_track = index_begin
                track_short = playlist_new.tracks[index_track - 1]
        else:
            index_track = int(playlist_ym[1])
            if f"{user_discord}|{playlist_id},{index_track}" not in data_servers[interaction.guild.name]['playlist']:
                data_servers[interaction.guild.name]['playlist'].append(f"{user_discord}|{playlist_id},{index_track}")
            track_short = playlist_new.tracks[index_track - 1]

    track = client_ym.tracks(track_short.track_id)[0]

    if not track.available:
        await interaction.response.send_message(f"{index_track} - {track.title} - —Ç—Ä–µ–∫ –æ—Ç–æ–∑–≤–∞–Ω –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º",
                                                ephemeral=True)
        if data_servers[interaction.guild.name]['index_play_now'] + 1 < len(
                data_servers[interaction.guild.name]['playlist']):
            voice_client.stop()
            data_servers[interaction.guild.name]['index_play_now'] += 1
            try:
                data_servers[interaction.guild.name]['task'].cancel()
            except Exception as e:
                await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)
                return False
            data_servers[interaction.guild.name]['task'] = asyncio.create_task(play(interaction, data_servers[
                interaction.guild.name]['playlist'][data_servers[interaction.guild.name]['index_play_now']]))
            data_servers[interaction.guild.name]['task_reserv'] = data_servers[interaction.guild.name]['task']
            return False
        else:
            await interaction.channel.send("–¢—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
            return False
    artists = track.artists
    if not artists:
        artist_all = ""
    else:
        artist_names = [artist.name for artist in artists]  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞—Ä—Ç–∏—Å—Ç–æ–≤
        artist_all = ", ".join(artist_names)  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    if playlist_id == "3":
        play_now = f"\n–ü–ª–µ–π–ª–∏—Å—Ç: –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n–¢—Ä–µ–∫: {track.title}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {artist_all}\n–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞: {index_track}\\{len(playlist_new.tracks)}"
    else:
        play_now = f"\n–ü–ª–µ–π–ª–∏—Å—Ç: {playlist_new.title}\n–¢—Ä–µ–∫: {track.title}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {artist_all}\n–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞: {index_track}\\{len(playlist_new.tracks)}"

    track.download(f'C:\\Users\\{user}\\Music\\YM_{user_discord}.mp3')
    try:
        data_servers[interaction.guild.name]['lyrics'] = track.get_lyrics().fetch_lyrics()
    except Exception:
        data_servers[interaction.guild.name]['lyrics'] = None

    if track.desired_visibility:
        data_servers[interaction.guild.name]['track_url'] = None
        data_servers[interaction.guild.name]['track_id_play_now'] = None
    else:
        data_servers[interaction.guild.name]['track_id_play_now'] = track.id
        base_url = 'https://music.yandex.ru/track/'
        if ":" in track_short.track_id:
            data_servers[interaction.guild.name]['track_url'] = base_url + str(track_short.track_id).split(":")[0]
        else:
            data_servers[interaction.guild.name]['track_url'] = base_url + str(track_short.track_id)

    if track.cover_uri:
        data_servers[interaction.guild.name]['cover_url'] = f"https://{track.cover_uri.replace('%%', '200x200')}"
    else:
        data_servers[interaction.guild.name]['cover_url'] = None

    audio_file_path = f'{output_path}\\YM_{user_discord}.mp3'

    # if not await check_audio_file(audio_file_path):
    #     # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
    #     audio = AudioSegment.from_file(audio_file_path)
    #     audio = audio.set_frame_rate(48000).set_channels(2)
    #     audio.export(audio_file_path, format="mp3")

    return [play_now, audio_file_path]
async def send_search_request(interaction: discord.Interaction, query, user_discord):
    global data_servers
    voice_client = interaction.guild.voice_client

    client_ym = Client(tokens[user_discord]).init()

    search_result = client_ym.search(query.replace('"', ''))

    type_to_name = {
        'track': '—Ç—Ä–µ–∫',
        'artist': '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'album': '–∞–ª—å–±–æ–º',
        'playlist': '–ø–ª–µ–π–ª–∏—Å—Ç',
        'video': '–≤–∏–¥–µ–æ',
        'user': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'podcast': '–ø–æ–¥–∫–∞—Å—Ç',
        'podcast_episode': '—ç–ø–∏–∑–æ–¥ –ø–æ–¥–∫–∞—Å—Ç–∞',
    }

    type_ = search_result.best.type
    best = search_result.best.result
    if type_ in ['track', 'podcast_episode']:
        track = client_ym.tracks(best.track_id)[0]
        data_servers[interaction.guild.name]['track_id_play_now'] = track.id
        artists = track.artists
        if not artists:
            artist_all = ""
        else:
            artist_names = [artist.name for artist in artists]  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞—Ä—Ç–∏—Å—Ç–æ–≤
            artist_all = ", ".join(artist_names)  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        play_now = f"\n–¢—Ä–µ–∫: {track.title}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {artist_all}"

        track.download(f'{output_path}\\YM_{user_discord}.mp3')

        try:
            data_servers[interaction.guild.name]['lyrics'] = track.get_lyrics().fetch_lyrics()
        except Exception:
            data_servers[interaction.guild.name]['lyrics'] = None

        if track.desired_visibility:
            data_servers[interaction.guild.name]['track_url'] = None
        else:
            base_url = 'https://music.yandex.ru/track/'
            if ":" in track.track_id:
                data_servers[interaction.guild.name]['track_url'] = base_url + str(track.track_id).split(":")[0]
            else:
                data_servers[interaction.guild.name]['track_url'] = base_url + str(track.track_id)

        if track.cover_uri:
            data_servers[interaction.guild.name]['cover_url'] = f"https://{track.cover_uri.replace('%%', '200x200')}"
        else:
            data_servers[interaction.guild.name]['cover_url'] = None

        audio_file_path = f'{output_path}\\YM_{user_discord}.mp3'

        # if not await check_audio_file(audio_file_path):
        #     # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
        #     audio = AudioSegment.from_file(audio_file_path)
        #     audio = audio.set_frame_rate(96000).set_channels(2)
        #     audio.export(audio_file_path, format="mp3")

        return [play_now, audio_file_path]
    else:
        data_servers[interaction.guild.name]['track_id_play_now'] = None
        await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º", ephemeral=True)
        return False
async def play_radio(interaction: discord.Interaction, user_discord=None, first: bool = False, station_id: str = None, station_from: str = None):
    global data_servers
    if first:
        client_ym = Client(tokens[str(user_discord)]).init()
        data_servers[interaction.guild.name]['radio'] = Radio(client_ym)
        data_servers[interaction.guild.name]['user_discord_radio'] = user_discord
        for rotor in client_ym.rotor_stations_dashboard().stations:
            if rotor.station['name'] == "–ú–æ—è –≤–æ–ª–Ω–∞":
                station = rotor.station
        _station_id = station_id or f'{station.id.type}:{station.id.tag}'
        _station_from = station_from or station.id_for_from
        track = data_servers[interaction.guild.name]['radio'].start_radio(_station_id, _station_from)
    else:
        track = data_servers[interaction.guild.name]['radio'].play_next()

    data_servers[interaction.guild.name]['track_id_play_now'] = track.id
    base_url = 'https://music.yandex.ru/track/'
    if ":" in track.track_id:
        data_servers[interaction.guild.name]['track_url'] = base_url + str(track.track_id).split(":")[0]
    else:
        data_servers[interaction.guild.name]['track_url'] = base_url + str(track.track_id)
    data_servers[interaction.guild.name]['task'] = asyncio.create_task(
        play(interaction, data_servers[interaction.guild.name]['track_url']))
    data_servers[interaction.guild.name]['task_reserv'] = data_servers[interaction.guild.name]['task']


'''
–ö–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–¥–∏–æ
'''
class Radio:
    def __init__(self, client):
        self.client = client
        self.station_id = None
        self.station_from = None

        self.play_id = None
        self.index = 0
        self.current_track = None
        self.station_tracks = None

    def start_radio(self, station_id, station_from) -> Track:
        self.station_id = station_id
        self.station_from = station_from

        # get first 5 tracks
        self.__update_radio_batch(None)

        # setup current track
        self.current_track = self.__update_current_track()
        return self.current_track

    def play_next(self) -> Track:
        # send prev track finalize info
        self.__send_play_end_track(self.current_track, self.play_id)
        self.__send_play_end_radio(self.current_track, self.station_tracks.batch_id)

        # get next index
        self.index += 1
        if self.index >= len(self.station_tracks.sequence):
            # get next 5 tracks. Set index to 0
            self.__update_radio_batch(self.current_track.track_id)

        # setup next track
        self.current_track = self.__update_current_track()
        return self.current_track

    def __update_radio_batch(self, queue=None):
        self.index = 0
        self.station_tracks = self.client.rotor_station_tracks(self.station_id, queue=queue)
        self.__send_start_radio(self.station_tracks.batch_id)

    def __update_current_track(self):
        self.play_id = self.__generate_play_id()
        track = self.client.tracks([self.station_tracks.sequence[self.index].track.track_id])[0]
        self.__send_play_start_track(track, self.play_id)
        self.__send_play_start_radio(track, self.station_tracks.batch_id)
        return track

    def __send_start_radio(self, batch_id):
        self.client.rotor_station_feedback_radio_started(
            station=self.station_id, from_=self.station_from, batch_id=batch_id
        )

    def __send_play_start_track(self, track, play_id):
        total_seconds = track.duration_ms / 1000
        self.client.play_audio(
            from_="desktop_win-home-playlist_of_the_day-playlist-default",
            track_id=track.id,
            album_id=track.albums[0].id,
            play_id=play_id,
            track_length_seconds=0,
            total_played_seconds=0,
            end_position_seconds=total_seconds,
        )

    def __send_play_start_radio(self, track, batch_id):
        self.client.rotor_station_feedback_track_started(station=self.station_id, track_id=track.id, batch_id=batch_id)

    def __send_play_end_track(self, track, play_id):
        # played_seconds = 5.0
        played_seconds = track.duration_ms / 1000
        total_seconds = track.duration_ms / 1000
        self.client.play_audio(
            from_="desktop_win-home-playlist_of_the_day-playlist-default",
            track_id=track.id,
            album_id=track.albums[0].id,
            play_id=play_id,
            track_length_seconds=int(total_seconds),
            total_played_seconds=played_seconds,
            end_position_seconds=total_seconds,
        )

    def __send_play_end_radio(self, track, batch_id):
        played_seconds = track.duration_ms / 1000
        self.client.rotor_station_feedback_track_finished(
            station=self.station_id, track_id=track.id, total_played_seconds=played_seconds, batch_id=batch_id
        )
        pass

    @staticmethod
    def __generate_play_id():
        return "%s-%s-%s" % (int(random() * 1000), int(random() * 1000), int(random() * 1000))


'''
–ö–ª–∞—Å—Å—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
'''
class repeat_button(Button):
    def __init__(self):
        super().__init__(style=ButtonStyle.primary, label="–ü–æ–≤—Ç–æ—Ä", emoji="üîÇ", row=2)

    async def callback(self, interaction: discord.Interaction):
        global data_servers
        if self.style == ButtonStyle.green:
            self.style = ButtonStyle.primary  # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ primary
            data_servers[interaction.guild.name]['repeat_flag'] = False  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º repeat_flag –≤ False
        else:
            self.style = ButtonStyle.green  # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π
            data_servers[interaction.guild.name]['repeat_flag'] = True  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º repeat_flag –≤ True
        await interaction.response.edit_message(view=self.view)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
class next_button(Button):
    def __init__(self, interaction: discord.Interaction):
        super().__init__(style=ButtonStyle.primary,
                         label="–ö —Å–ª–µ–¥—É—é—â–µ–º—É",
                         emoji="‚è≠Ô∏è",
                         row=1,
                         disabled=data_servers[interaction.guild.name]['index_play_now'] + 1 >= len(
                             data_servers[interaction.guild.name]['playlist']) and not
                                  data_servers[interaction.guild.name]['radio_check'] and not
                                  data_servers[interaction.guild.name]['stream_by_track_check'])

    async def callback(self, interaction: discord.Interaction):
        global data_servers
        voice_client = interaction.guild.voice_client
        voice_client.stop()
        if data_servers[interaction.guild.name]['radio_check'] or data_servers[interaction.guild.name][
            'stream_by_track_check']:
            data_servers[interaction.guild.name]['task'].cancel()
            await play_radio(interaction=interaction)
        else:
            data_servers[interaction.guild.name]['index_play_now'] += 1
            try:
                data_servers[interaction.guild.name]['task'].cancel()
            except Exception as e:
                await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)
            data_servers[interaction.guild.name]['task'] = asyncio.create_task(play(interaction, data_servers[
                interaction.guild.name]['playlist'][data_servers[interaction.guild.name]['index_play_now']]))
            data_servers[interaction.guild.name]['task_reserv'] = data_servers[interaction.guild.name]['task']
class prev_button(Button):
    def __init__(self, interaction: discord.Interaction):
        super().__init__(style=ButtonStyle.primary,
                         label="–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É",
                         emoji="‚èÆÔ∏è",
                         row=1,
                         disabled=data_servers[interaction.guild.name]['index_play_now'] - 1 < 0 or
                                  data_servers[interaction.guild.name]['radio_check'] or
                                  data_servers[interaction.guild.name]['stream_by_track_check'])

    async def callback(self, interaction: discord.Interaction):
        global data_servers
        voice_client = interaction.guild.voice_client
        voice_client.stop()
        data_servers[interaction.guild.name]['index_play_now'] -= 1
        try:
            data_servers[interaction.guild.name]['task'].cancel()
        except Exception as e:
            await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)
        data_servers[interaction.guild.name]['task'] = asyncio.create_task(play(interaction,
                                                                                data_servers[interaction.guild.name][
                                                                                    'playlist'][data_servers[
                                                                                    interaction.guild.name][
                                                                                    'index_play_now']]))
        data_servers[interaction.guild.name]['task_reserv'] = data_servers[interaction.guild.name]['task']
class pause_resume_button(Button):
    def __init__(self):
        super().__init__(style=ButtonStyle.primary, label="–ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", emoji="‚èØÔ∏è", row=1)

    async def callback(self, interaction):
        voice_client = interaction.guild.voice_client  # use the attribute
        if self.style == ButtonStyle.green:
            self.style = ButtonStyle.primary  # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ primary
            voice_client.resume()
        else:
            self.style = ButtonStyle.green  # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π
            voice_client.pause()
        await interaction.response.edit_message(view=self.view)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
class disconnect_button(Button):
    def __init__(self):
        super().__init__(style=ButtonStyle.red, label="–û—Ç–∫–ª—é—á–∏—Ç—å", emoji="üìõ", row=3)

    async def callback(self, interaction: discord.Interaction):
        voice_client = interaction.guild.voice_client  # use the attribute
        if voice_client.is_playing():
            voice_client.stop()

        await disconnect(interaction)
class lyrics_button(Button):
    def __init__(self, interaction: discord.Interaction):
        super().__init__(style=ButtonStyle.primary,
                         label="–¢–µ–∫—Å—Ç",
                         emoji="üóíÔ∏è",
                         row=2,
                         disabled=data_servers[interaction.guild.name]['lyrics'] is None)

    async def callback(self, interaction: discord.Interaction):
        global data_servers
        if self.style == ButtonStyle.green:
            self.style = ButtonStyle.primary  # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ primary
            async for message in interaction.channel.history():
                if message.author == client.user and message.content.startswith('–¢–µ–∫—Å—Ç'):
                    await message.delete()
        else:
            self.style = ButtonStyle.green  # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π
            if len(data_servers[interaction.guild.name]['lyrics']) > 2000:
                # Split the lyrics into two parts using textwrap
                parts = textwrap.wrap(data_servers[interaction.guild.name]['lyrics'], width=1800,
                                      break_long_words=False, replace_whitespace=False)
                await interaction.channel.send(f"–¢–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ (—á–∞—Å—Ç—å 1):\n{parts[0]}")
                await interaction.channel.send(f"–¢–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ (—á–∞—Å—Ç—å 2):\n{parts[1]}")
            else:
                await interaction.channel.send(f"–¢–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞:\n{data_servers[interaction.guild.name]['lyrics']}")
        await interaction.response.edit_message(view=self.view)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
class track_url_button(Button):
    def __init__(self, interaction: discord.Interaction):
        if data_servers[interaction.guild.name]['track_url']:
            super().__init__(style=ButtonStyle.url,
                             label="–°—Å—ã–ª–∫–∞",
                             emoji="üåê",
                             url=data_servers[interaction.guild.name]['track_url'],
                             row=2)
        else:
            super().__init__(style=ButtonStyle.grey,
                             label="–°—Å—ã–ª–∫–∞",
                             emoji="üåê",
                             disabled=True,
                             row=2)
class stream_by_track_button(Button):
    def __init__(self, interaction: discord.Interaction):
        super().__init__(style=ButtonStyle.primary,
                         label="–ú–æ—è –≤–æ–ª–Ω–∞ –ø–æ —Ç—Ä–µ–∫—É",
                         emoji="üí´",
                         row=2,
                         disabled=not data_servers[interaction.guild.name]['track_id_play_now'])

    async def callback(self, interaction: discord.Interaction):
        global data_servers
        if str(interaction.user) not in tokens:
            await interaction.response.send_message(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {str(interaction.user)} –Ω–µ –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏. –î–ª—è –≤—Ö–æ–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π !authorize",
                ephemeral=True)
            return
        data_servers[interaction.guild.name]['radio_check'] = False
        data_servers[interaction.guild.name]['stream_by_track_check'] = True
        voice_client = interaction.guild.voice_client
        data_servers[interaction.guild.name]['playlist'] = []
        data_servers[interaction.guild.name]['index_play_now'] = 0
        if voice_client.is_playing() or voice_client.is_paused():
            voice_client.stop()
            data_servers[interaction.guild.name]['task'].cancel()
        await play_radio(interaction=interaction,
                         user_discord=interaction.user,
                         first=True,
                         station_id='track:' + data_servers[interaction.guild.name]['track_id_play_now'],
                         station_from='track')
class PlaylistSelect(Select):
    def __init__(self, interaction: discord.Interaction):
        options = []
        user_discord = str(interaction.user)
        client_ym = Client(tokens[user_discord]).init()

        options.append(SelectOption(label="–ú–æ—è –≤–æ–ª–Ω–∞", value="1", description="–†–∞–¥–∏–æ"))
        options.append(SelectOption(label="–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", value="3",
                                    description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {len(client_ym.users_likes_tracks())}"))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏ –∏—Ö ID
        playlists_ym = client_ym.users_playlists_list()
        for playlist_ym in playlists_ym:
            playlist_ym_id = playlist_ym.playlist_id.split(':')[1]
            options.append(SelectOption(label=str(playlist_ym.title), value=str(playlist_ym_id),
                                        description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {len(client_ym.users_playlists(int(playlist_ym_id)).tracks)}"))

        super().__init__(placeholder='–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç...', min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        global data_servers
        voice_client = interaction.guild.voice_client
        data_servers[interaction.guild.name]['playlist'] = []
        data_servers[interaction.guild.name]['index_play_now'] = 0
        if voice_client.is_playing() or voice_client.is_paused():
            voice_client.stop()
            data_servers[interaction.guild.name]['task_reserv'].cancel()
            data_servers[interaction.guild.name]['task'].cancel()
        if self.values[0] == "1":
            data_servers[interaction.guild.name]['radio_check'] = True
            data_servers[interaction.guild.name]['stream_by_track_check'] = False
            return await play_radio(interaction=interaction, user_discord=interaction.user, first=True)
        else:
            data_servers[interaction.guild.name]['radio_check'] = False
            data_servers[interaction.guild.name]['stream_by_track_check'] = False
            data_servers[interaction.guild.name]['task'] = asyncio.create_task(play(interaction, self.values[0]))
            data_servers[interaction.guild.name]['task_reserv'] = data_servers[interaction.guild.name]['task']
class onyourwave_setting_button(Button):
    def __init__(self, interaction: discord.Interaction):
        super().__init__(style=ButtonStyle.primary,
                         label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–ª–Ω—É",
                         emoji="‚öôÔ∏è",
                         row=3,
                         disabled=not data_servers[interaction.guild.name]['radio_check'])

    async def callback(self, interaction: discord.Interaction):
        view = View(timeout=1200.0)
        if interaction.user == data_servers[interaction.guild.name]['user_discord_radio']:
            view.add_item(onyourwave_setting_diversity())
            view.add_item(onyourwave_setting_mood_energy())
            view.add_item(onyourwave_setting_language())

            await interaction.response.send_message(view=view, ephemeral=True)
        else:
            await interaction.response.send_message('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–æ–ª–Ω—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –µ—ë –∑–∞–ø—É—Å—Ç–∏–ª',
                                                    ephemeral=True)
class onyourwave_setting_diversity(Select):
    def __init__(self):
        super().__init__(placeholder=f'–ü–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É...', min_values=1, max_values=1, options=[
            SelectOption(label='–õ—é–±–∏–º–æ–µ', value='favorite', emoji='üíñ'),
            SelectOption(label='–ù–µ–∑–Ω–∞–∫–æ–º–æ–µ', value='discover', emoji='‚ú®'),
            SelectOption(label='–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ', value='popular', emoji='‚ö°'),
            SelectOption(label='–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é', value='default', emoji='‚ô¶Ô∏è')
        ])

    async def callback(self, interaction: discord.Interaction):
        global settings_onyourwave, data_servers

        settings_onyourwave[str(interaction.user)]['diversity'] = self.values[0]

        client_ym = Client(tokens[str(interaction.user)]).init()

        client_ym.rotor_station_settings2(
            station='user:onyourwave',
            mood_energy=settings_onyourwave[str(interaction.user)]['mood_energy'],
            diversity=settings_onyourwave[str(interaction.user)]['diversity'],
            language=settings_onyourwave[str(interaction.user)]['language']
        )
        voice_client = interaction.guild.voice_client
        if voice_client.is_playing() or voice_client.is_paused():
            voice_client.stop()
            data_servers[interaction.guild.name]['task_reserv'].cancel()
            data_servers[interaction.guild.name]['task'].cancel()
        await play_radio(interaction=interaction, user_discord=interaction.user, first=True)
class onyourwave_setting_mood_energy(Select):
    def __init__(self):
        super().__init__(placeholder=f'–ü–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...', min_values=1, max_values=1, options=[
            SelectOption(label='–ë–æ–¥—Ä–æ–µ', value='active', emoji='üü†'),
            SelectOption(label='–í–µ—Å—ë–ª–æ–µ', value='fun', emoji='üü¢'),
            SelectOption(label='–°–ø–æ–∫–æ–π–Ω–æ–µ', value='calm', emoji='üîµ'),
            SelectOption(label='–ì—Ä—É—Å—Ç–Ω–æ–µ', value='sad', emoji='üü£'),
            SelectOption(label='–õ—é–±–æ–µ', value='all', emoji='üîò')
        ])

    async def callback(self, interaction: discord.Interaction):
        global settings_onyourwave, data_servers

        settings_onyourwave[str(interaction.user)]['mood_energy'] = self.values[0]

        client_ym = Client(tokens[str(interaction.user)]).init()

        client_ym.rotor_station_settings2(
            station='user:onyourwave',
            mood_energy=settings_onyourwave[str(interaction.user)]['mood_energy'],
            diversity=settings_onyourwave[str(interaction.user)]['diversity'],
            language=settings_onyourwave[str(interaction.user)]['language']
        )
        voice_client = interaction.guild.voice_client
        if voice_client.is_playing() or voice_client.is_paused():
            voice_client.stop()
            data_servers[interaction.guild.name]['task_reserv'].cancel()
            data_servers[interaction.guild.name]['task'].cancel()
        await play_radio(interaction=interaction, user_discord=interaction.user, first=True)
class onyourwave_setting_language(Select):
    def __init__(self):
        super().__init__(placeholder=f'–ü–æ —è–∑—ã–∫—É...', min_values=1, max_values=1, options=[
            SelectOption(label='–†—É—Å—Å–∫–∏–π', value='russian'),
            SelectOption(label='–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π', value='not-russian'),
            SelectOption(label='–ë–µ–∑ —Å–ª–æ–≤', value='without-words'),
            SelectOption(label='–õ—é–±–æ–π', value='any')
        ])

    async def callback(self, interaction: discord.Interaction):
        global settings_onyourwave, data_servers

        settings_onyourwave[str(interaction.user)]['language'] = self.values[0]

        client_ym = Client(tokens[str(interaction.user)]).init()

        client_ym.rotor_station_settings2(
            station='user:onyourwave',
            mood_energy=settings_onyourwave[str(interaction.user)]['mood_energy'],
            diversity=settings_onyourwave[str(interaction.user)]['diversity'],
            language=settings_onyourwave[str(interaction.user)]['language']
        )
        voice_client = interaction.guild.voice_client
        if voice_client.is_playing() or voice_client.is_paused():
            voice_client.stop()
            data_servers[interaction.guild.name]['task_reserv'].cancel()
            data_servers[interaction.guild.name]['task'].cancel()
        await play_radio(interaction=interaction, user_discord=interaction.user, first=True)


'''
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
'''
@tree.command(name='play', description="üéß–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫. –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
@app_commands.describe(url_or_trackname='–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å: —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –∏–ª–∏ YouTube, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞')
async def start_play(interaction: discord.Interaction, url_or_trackname: str = None):
    global data_servers, settings_onyourwave

    if interaction.guild.name not in data_servers:
        data_servers[interaction.guild.name] = data_server

    if str(interaction.user) not in settings_onyourwave:
        settings_onyourwave[str(interaction.user)] = {'mood_energy': 'all', 'diversity': 'default', 'language': 'any'}

    author_voice_state = interaction.user.voice
    if author_voice_state is None:
        await interaction.response.send_message("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    voice_client = interaction.guild.voice_client

    if not voice_client:
        voice_channel = interaction.user.voice.channel
        await voice_channel.connect()
        voice_client = interaction.guild.voice_client

    data_servers[interaction.guild.name]['task'] = asyncio.create_task(play(interaction, url_or_trackname))
    data_servers[interaction.guild.name]['task_check_inactivity'] = asyncio.create_task(check_inactivity(interaction))
    data_servers[interaction.guild.name]['task_check_voice_clients'] = asyncio.create_task(
        check_voice_clients(interaction))
async def play(interaction: discord.Interaction, url_or_trackname_or_filepath: str = None, flag_repeat: bool = True):
    try:
        global output_path, tokens, data_servers

        voice_client = interaction.guild.voice_client

        if not url_or_trackname_or_filepath:  # –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω url
            view = View()
            view.add_item(PlaylistSelect(interaction))
            await interaction.response.send_message(view=view, ephemeral=True)
            return
        else:

            # if len(data_servers[interaction.guild.name]['playlist']) == 0 and not data_servers[interaction.guild.name]['radio_check']
            #
            # while data_servers[interaction.guild.name]['index_play_now'] < len(data_servers[interaction.guild.name]['playlist']):
            #
            #     url_or_trackname_or_filepath = data_servers[interaction.guild.name]['playlist'][data_servers[interaction.guild.name]['index_play_now']]

            if "youtube.com" in url_or_trackname_or_filepath:
                if "|" not in url_or_trackname_or_filepath:
                    user_discord = interaction.user
                else:
                    p = url_or_trackname_or_filepath.split('|')
                    name_and_discriminator = p[0]  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è#–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä"

                    user_discord = discord.utils.get(interaction.guild.members,
                                                     name=name_and_discriminator.split("#")[0],
                                                     discriminator=name_and_discriminator.split("#")[
                                                         1])  # –∏—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–æ–º
                    url_or_trackname_or_filepath = p[1]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–µ—Ç –ª–∏ –±–æ—Ç —É–∂–µ –∫–∞–∫—É—é-—Ç–æ –º—É–∑—ã–∫—É
                if voice_client.is_playing() or voice_client.is_paused():
                    # playlists[ctx.guild.name].append(f"{user_discord}-{url_or_trackname_or_filepath}")
                    # await ctx.send(f"–¢—Ä–µ–∫ {url_or_trackname_or_filepath} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                    # return
                    voice_client.stop()
                    data_servers[interaction.guild.name]['task_reserv'].cancel()

                p = await play_YouTube(url_or_trackname_or_filepath, user_discord, interaction)

                play_now = p[0]
                audio_file_path = p[1]

            elif "music.yandex.ru" in url_or_trackname_or_filepath:

                if "|" not in url_or_trackname_or_filepath:
                    if data_servers[interaction.guild.name]['user_discord_radio']:
                        user_discord = data_servers[interaction.guild.name]['user_discord_radio']
                    else:
                        user_discord = interaction.user
                else:
                    p = url_or_trackname_or_filepath.split('|')
                    name_and_discriminator = p[0]  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è#–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä"

                    user_discord = discord.utils.get(interaction.guild.members,
                                                     name=name_and_discriminator.split("#")[0],
                                                     discriminator=name_and_discriminator.split("#")[
                                                         1])  # –∏—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–æ–º
                    url_or_trackname_or_filepath = p[1]

                if not str(user_discord) in tokens:
                    await interaction.response.send_message(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {str(user_discord)} –Ω–µ –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏. –î–ª—è –≤—Ö–æ–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π !authorize",
                        ephemeral=True)
                    return

                p = await play_Yandex_Music_url(interaction, url_or_trackname_or_filepath, str(user_discord))
                play_now = p[0]
                audio_file_path = p[1]

            elif ":\\" in url_or_trackname_or_filepath:
                play_now = url_or_trackname_or_filepath
                audio_file_path = url_or_trackname_or_filepath

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not os.path.isfile(audio_file_path):
                    await ctx.send(f"–§–∞–π–ª `{url_or_trackname_or_filepath}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–µ—Ç –ª–∏ –±–æ—Ç —É–∂–µ –∫–∞–∫—É—é-—Ç–æ –º—É–∑—ã–∫—É
                if voice_client.is_playing():
                    playlists[ctx.guild.name].append(url_or_trackname_or_filepath)
                    await ctx.send(f"–¢—Ä–µ–∫ \"{url_or_trackname_or_filepath}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                    return

                # if not await check_audio_file(audio_file_path):
                #     # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
                #     audio = AudioSegment.from_file(audio_file_path)
                #     audio = audio.set_frame_rate(96000).set_channels(2)
                #     new_path = f'{output_path}\\audio_fixed.mp3'
                #     audio.export(new_path, format="mp3")
                #     audio_file_path = new_path

            elif ".mp3" in url_or_trackname_or_filepath or ".flac" in url_or_trackname_or_filepath:
                if "@" in url_or_trackname_or_filepath:
                    play_now = url_or_trackname_or_filepath[1:]
                    audio_file_path = f'{output_path}\\{url_or_trackname_or_filepath[1:]}'

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if not os.path.isfile(audio_file_path):
                        await ctx.send(f"–§–∞–π–ª \"{url_or_trackname_or_filepath[1:]}\" –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return

                    if not await check_audio_file(audio_file_path):
                        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
                        audio = AudioSegment.from_file(audio_file_path)
                        audio = audio.set_frame_rate(96000).set_channels(2)
                        new_path = f'{output_path}\\audio_fixed.mp3'
                        audio.export(new_path, format="mp3")
                        audio_file_path = new_path

                    index_play_now -= 1

                    if voice_client.is_playing():
                        voice_client.stop()
                else:
                    play_now = url_or_trackname_or_filepath
                    audio_file_path = f'{output_path}\\{url_or_trackname_or_filepath}'

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if not os.path.isfile(audio_file_path):
                        await ctx.send(f"–§–∞–π–ª \"{url_or_trackname_or_filepath}\" –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–µ—Ç –ª–∏ –±–æ—Ç —É–∂–µ –∫–∞–∫—É—é-—Ç–æ –º—É–∑—ã–∫—É
                    if voice_client.is_playing():
                        playlists[ctx.guild.name].append(url_or_trackname_or_filepath)
                        await ctx.send(f"–¢—Ä–µ–∫ \"{url_or_trackname_or_filepath}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                        return

                    if not await check_audio_file(audio_file_path):
                        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
                        audio = AudioSegment.from_file(audio_file_path)
                        audio = audio.set_frame_rate(96000).set_channels(2)
                        new_path = f'{output_path}\\audio_fixed.mp3'
                        audio.export(new_path, format="mp3")
                        audio_file_path = new_path

            else:
                if "|" not in url_or_trackname_or_filepath:
                    user_discord = interaction.user
                else:
                    p = url_or_trackname_or_filepath.split('|')
                    name_and_discriminator = p[0]  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è#–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä"

                    user_discord = discord.utils.get(interaction.guild.members,
                                                     name=name_and_discriminator.split("#")[0],
                                                     discriminator=name_and_discriminator.split("#")[
                                                         1])  # –∏—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–æ–º
                    url_or_trackname_or_filepath = p[1]

                if not str(user_discord) in tokens:
                    await interaction.response.send_message(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {str(user_discord)} –Ω–µ –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏. –î–ª—è –≤—Ö–æ–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π !authorize",
                        ephemeral=True)
                    return

                p = await play_Yandex_Music_playlist(interaction, url_or_trackname_or_filepath, str(user_discord))
                if not p:
                    return

                play_now = p[0]
                audio_file_path = p[1]

            data_servers[interaction.guild.name]['queue_repeat'] = audio_file_path
            options = '-loglevel panic'
            audio_source = await discord.FFmpegOpusAudio.from_probe(audio_file_path, options=options)

            # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            voice_client.play(audio_source)

        if flag_repeat:
            data_servers[interaction.guild.name]['repeat_flag'] = False

            await remove_last_playing_message(interaction)

            view = View(timeout=1200.0)

            view.add_item(prev_button(interaction))
            view.add_item(pause_resume_button())
            view.add_item(next_button(interaction))
            view.add_item(repeat_button())
            view.add_item(lyrics_button(interaction))
            view.add_item(track_url_button(interaction))
            view.add_item(disconnect_button())
            view.add_item(stream_by_track_button(interaction))
            if data_servers[interaction.guild.name]['radio_check']:
                view.add_item(onyourwave_setting_button(interaction))

            embed = Embed(title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description=play_now, color=0xf1ca0d)
            if data_servers[interaction.guild.name]['radio_check']:
                embed.set_footer(text=f"{user_discord} –∑–∞–ø—É—Å—Ç–∏–ª –≤–æ–ª–Ω—É", icon_url=user_discord.avatar)
            else:
                embed.set_footer(text=f"{user_discord} –∑–∞–ø—É—Å—Ç–∏–ª —Ç—Ä–µ–∫", icon_url=user_discord.avatar)

            if data_servers[interaction.guild.name]['cover_url']:
                embed.set_thumbnail(url=data_servers[interaction.guild.name]['cover_url'])

            message = await interaction.channel.send(embed=embed, view=view)
            now = datetime.datetime.now()
            current_time = now.time()

            # with open(filename, "a", encoding='windows 1251') as f:
            #     f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            #     f.write(f"–í—Ä–µ–º—è: {current_time}\n"
            #             f"–°–µ—Ä–≤–µ—Ä: {interaction.guild.name}\n"
            #             f"–ú—É–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_discord}"
            #             f"{play_now}\n\n")
            data_servers[interaction.guild.name]['message_check'] = message

        while voice_client.is_playing() or voice_client.is_paused():
            if voice_client.is_playing():
                data_servers[interaction.guild.name]['last_activity_time'] = datetime.datetime.now()
            await asyncio.sleep(1)
        if data_servers[interaction.guild.name]['repeat_flag']:
            data_servers[interaction.guild.name]['task'] = asyncio.create_task(
                play(interaction, data_servers[interaction.guild.name]['queue_repeat'], False))
            return
        elif data_servers[interaction.guild.name]['radio_check'] or data_servers[interaction.guild.name][
            'stream_by_track_check']:
            await play_radio(interaction=interaction, user_discord=user_discord)
        else:
            if data_servers[interaction.guild.name]['index_play_now'] + 1 < len(
                    data_servers[interaction.guild.name]['playlist']):
                data_servers[interaction.guild.name]['index_play_now'] += 1
                data_servers[interaction.guild.name]['task'] = asyncio.create_task(play(interaction, data_servers[
                    interaction.guild.name]['playlist'][data_servers[interaction.guild.name]['index_play_now']]))
                data_servers[interaction.guild.name]['task_reserv'] = data_servers[interaction.guild.name]['task']
                return
            else:
                await interaction.channel.send("–¢—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                return

    except Exception as e:
        await interaction.channel.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ –º—É–∑—ã–∫–∏: {e}.")

@tree.command(name='authorize', description="üîë–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞")
@app_commands.describe(token='–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏')
async def authorize(interaction: discord.Interaction, token: str):
    global tokens
    try:
        if str(interaction.user) in tokens:
            await interaction.response.send_message("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ü•∞", ephemeral=True)
            return

        client_check = Client(str(token)).init()
    except Exception:
        await interaction.response.send_message("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à —Ç–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π üòû", ephemeral=True)
    else:
        await interaction.response.send_message("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å üòç", ephemeral=True)
        user_discord = str(interaction.user)
        tokens[user_discord] = str(token)

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        with open("tokens.txt", "a") as f:
            f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            f.write(user_discord + " " + str(token) + "\n")

@tree.command(name='log', description="–°–ª—É–∂–µ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
@app_commands.describe(server_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ª–æ–≥')
async def log(interaction: discord.Interaction, server_name: str):
    global data_servers
    if str(interaction.user) == 'ti_jack#2994':
        if server_name in data_servers:
            for item in data_servers[server_name]:
                print(f'{item}: {data_servers[server_name][item]}')
        else:
            print("–¢–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ª–æ–≥–∞—Ö –Ω–µ—Ç")
    else:
        interaction.response.send_message("–≠—Ç–æ —Å–ª—É–∂–µ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!", ephemeral=True)

@tree.command(name='help', description="‚ùì–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
async def commands(interaction: discord.Interaction):
    command = {'/play': '–ò–º–µ–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç \'url_or_trackname\'\n\n'
                        '–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –µ–≥–æ\n\n'
                        '–í –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å:\n'
                        '1. –°—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube\n'
                        '2. –°—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏\n'
                        '3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–∂–Ω–æ —É–∑–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏)\n',
               '/authorize': '–ò–º–µ–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç \'token\'\n\n'
                             '–í –∞—Ä–≥—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏\n\n'
                             '–ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π\n\n'
                             '–° –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–∏–º–∏—Ç—å—Å—è –∑–¥–µ—Å—å:\nhttps://github.com/MarshalX/yandex-music-api/discussions/513'
               }

    class next_command_button(Button):
        def __init__(self, interaction: discord.Interaction):
            super().__init__(style=ButtonStyle.primary, emoji="‚û°Ô∏è", disabled=data_servers[interaction.guild.name]['command_now'] + 1 >= len(command))

        async def callback(self, interaction: discord.Interaction):
            global data_servers
            data_servers[interaction.guild.name]['command_now'] += 1
            self.view.clear_items()
            self.view.add_item(prev_command_button())
            self.view.add_item(next_command_button())
            await interaction.response.edit_message(
                content=f'–ö–æ–º–∞–Ω–¥–∞ {data_servers[interaction.guild.name]["command_now"]+1} –∏–∑ {len(command)}',
                embed=Embed(title='/authorize', description=command['/authorize'], color=0xf1ca0d),
                view=self.view)

    class prev_command_button(Button):
        def __init__(self, interaction: discord.Interaction):
            super().__init__(style=ButtonStyle.primary, emoji="‚¨ÖÔ∏è", disabled=data_servers[interaction.guild.name]['command_now']-1<0)

        async def callback(self, interaction: discord.Interaction):
            global data_servers
            data_servers[interaction.guild.name]['command_now'] -= 1
            self.view.clear_items()
            self.view.add_item(prev_command_button(interaction))
            self.view.add_item(next_command_button(interaction))
            await interaction.response.edit_message(
                content=f'–ö–æ–º–∞–Ω–¥–∞ {data_servers[interaction.guild.name]["command_now"]+1} –∏–∑ {len(command)}',
                embed=Embed(title='/play', description=command['/play'], color=0xf1ca0d),
                view=self.view)

    view = View(timeout=1200.0)

    view.add_item(prev_command_button(interaction))
    view.add_item(next_command_button(interaction))


    embed = Embed(title='/play', description=command['/play'], color=0xf1ca0d)

    await interaction.response.send_message(content=f'–ö–æ–º–∞–Ω–¥–∞ {data_servers[interaction.guild.name]["command_now"]+1} –∏–∑ {len(command)}', embed=embed, view=view)

@client.event
async def on_ready():
    await tree.sync()
    await client.change_presence(activity=discord.Activity(name="/help", type=discord.ActivityType.playing))
    print("Ready!")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
client.run('MTEwODgxMjQzNjkzNDUxMjgwMg.GU-z4e.NwgOx5UDp7HRMI5CnMidI7mvYZ0O07UvzkC4zk')
